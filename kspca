from sklearn.preprocessing import KernelCenterer
import numpy as np
from sklearn.linear_model import LinearRegression
import scipy as sc
from scipy.linalg import eigh
#from scipy.linalg import eig
#from scipy.linalg import eigh
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_boston
import warnings
from sklearn.feature_selection import VarianceThreshold
from sklearn.cross_decomposition import CCA
import csv
import pandas as pd
from sklearn.preprocessing import scale
from scipy.stats import wishart
from sklearn.preprocessing import StandardScaler
import pdb


class Machine:
    print("""This is code to compare the Bair and Barshan methods of kernel supervised PCA. 
    This includes: 
    1. Cleaning and prepping data; 
    2. Eigen decomposition for both methods;
    3. Comparinb data mapped to feature space based on both methods and returns the connonical correlation between the datasets;
    4. Mapping new data(hold-out) into the target space; 
    5. Computing r^2 for each method in relation to new data

    """)

    W = []
    warnings.filterwarnings('ignore')

    def __init__(self):
        self.X_train = None
        self.X_test = None
        self.y_train = None
        self.y_test = None
        self.eigen_vec_Barshan = None
        self.linKernel_XTest = None
        self.eigen_vec_Bair = None
        self.linKernel_selectedXTest = None
        self.ZBair = None
        self.Z = None
        self.eigen_val_Bair = None
        self.eigen_val_Barshan = None
        self.eigen = None

    def cleanPrepData(self):
        Xdf = np.loadtxt('X_NbyP.txt')
        Ydf = np.loadtxt('Y_NbyP.txt')
        XtrainSplit = Xdf[0:9]
        YtrainSplit = Ydf[0:9]
        self.X_test = Xdf[9:11]
        self.y_test = Ydf[9:11]
        self.X_train = np.asmatrix(stats.zscore(XtrainSplit, axis=0, ddof=1))
        self.y_train = np.asmatrix(stats.zscore(YtrainSplit, ddof=1))
        #self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X, y, test_size=0.10, random_state=1234)
        self.y_train = np.asmatrix(self.y_train)
        self.y_test = np.asmatrix(self.y_test)
        self.X_train = np.asmatrix(self.X_train)
        self.X_test = np.asmatrix(self.X_test)
        p = self.X_train.shape[1]
        n = self.X_train.shape[0]
        self.y_train = np.asmatrix(self.y_train).T
        print('cleanPrepData Method: 1. Data imported; 2.Data is normalized; '
              '3. Data is split into testing and training and cast as matrices; 4. Shape is printed')
        return n, p

    def Kernel(self):
        pass

    def betasBair(self):
        reg = LinearRegression(normalize=True)
        X_trainB, X_testB, y_trainB, y_testB = train_test_split(self.X_train, self.y_train, test_size=0.30, random_state=1234)
        regFitTrain = reg.fit(X_trainB, y_trainB)
        WTrain = regFitTrain.coef_
        thresholded_indicesTrain = WTrain >= np.median(WTrain)
        regFitTest = reg.fit(X_testB, y_testB)
        WTest = regFitTest.coef_
        thresholded_indicesTest = WTest >= np.median(WTest)
        print(
            'betaBair Method: 1. Conducts addition train/test split on training data to be used in CV of feature selection; '
            '2.Selects Features based on regression; 3.Returns selected features for train & test as boolian')
        return thresholded_indicesTest, thresholded_indicesTrain

    def threshBair(self, thresholded_indicesTest, thresholded_indicesTrain):
        thresh_cv = np.hstack(np.logical_and(thresholded_indicesTrain, thresholded_indicesTest))
        selected_xT = self.X_train.T[thresh_cv]
        selected_xtestT = self.X_test.T[thresh_cv]
        selected_x = selected_xT.T
        selected_xTest = np.asmatrix(selected_xtestT.T)
        print('threshBair Method: 1.Sets threshold to be features selected in both train & test sets;'
              '2. Returns selected features for both train and test')
        return selected_x, selected_xTest

    def PCABair(self, selected_x, selected_xTest):
        kC = KernelCenterer()
        linKernel_selectedX = np.dot(selected_x, selected_x.T)
        self.linKernel_selectedXTest = np.dot(selected_xTest, selected_x.T)
        center_KXBair = kC.fit_transform(X=linKernel_selectedX, y=None)
        (self.eigen_val_Bair,self.eigen_vec_Bair)= eigh(center_KXBair)
        self.ZBair = np.matmul(self.eigen_vec_Bair.T, linKernel_selectedX.T)
        print('PCABair Method: 1. Performs centering and decomposition on selected features; '
              '2. Orders eigen vectors by eigen values from largest to smallest; 3. Maps data to feature space ')
        pass

    def learn_Barshan(self):
        kC = KernelCenterer()
        linKernel_X = np.dot(self.X_train, self.X_train.T)

        #linkernel_XT =  linKernel_X.T

        linKernel_y = np.dot(self.y_train, self.y_train.T)

        #linKernel_yT = linKernel_y.T

        self.linKernel_XTest = np.dot(self.X_test, self.X_train.T)
        kCFit = kC.fit(linKernel_X)
        XCentered = kCFit.transform(linKernel_X)
        #XCenteredT = XCentered.T
        Q = np.dot(XCentered, np.dot(linKernel_y, XCentered))
        XCenteredDF = pd.DataFrame(XCentered)
        Qdf = pd.DataFrame(Q).round(4)
        #QT = Q.T
        (self.eigen_val_Barshan,self.eigen_vec_Barshan) = sc.linalg.eigh(Q, XCentered)
        vecsDF = pd.DataFrame(self.eigen_vec_Barshan).round(5)
        self.eigen_val_Barshan = np.asmatrix(self.eigen_val_Barshan)
        self.eigen_vec_Barshan = np.asmatrix(self.eigen_vec_Barshan)
        eigen_val_Barshan = self.eigen_val_Barshan
        eigen_vec_Barshan = self.eigen_vec_Barshan
        pdb.set_trace()


        self.ZBarshan = np.matmul(self.eigen_vec_Barshan.T, linKernel_X.T)
        print('learnBarshon Method: 1. Performs centering and decomposition on selected features;'
              '2. Orders eigen vectors by eigen values from largest to smallest; 3. Maps data to feature space')
        pass

    def writeEigen(self):
        eigen_val = np.real(self.eigen_val_Barshan)
        eigen_vec = np.real(self.eigen_vec_Barshan)
        eigen_val_round = np.matrix.round(eigen_val, decimals=4)
        eigen_vec_round = np.matrix.round(eigen_vec, decimals=4)
        eigen_valDF = pd.DataFrame(eigen_val_round)
        eigen_vecDF = pd.DataFrame(eigen_vec_round)
        eigenValNP = eigen_valDF.as_matrix()
        eigenVecNP = eigen_vecDF.as_matrix()
        np.savetxt('/Users/isaac/KSPCA_Comparison/valsNew3.csv', eigenValNP, delimiter=',') #, fmt="%.4f", delimiter=',')
        np.savetxt('/Users/isaac/KSPCA_Comparison/vecsNew3.csv', eigenVecNP, delimiter=',') #, fmt="%.4f", delimiter=',')
        print('writes eigen vals and vecs to txt file for external comparison')
        pass

    def compare(self):
        cca = CCA(n_components=1)
        cca.fit(self.ZBair, self.ZBarshan)
        CCscore = cca.score(self.ZBair, self.ZBarshan)
        print('Connonical Correlations between Bair and Barshan projections: ', CCscore)
        print('Compare Method: 1. calculates cononnical correlatio between encoded training data for both methods')
        pass

    def predict(self):
        zBarshan = np.matmul(self.linKernel_XTest, self.eigen_vec_Barshan)
        zBair = np.matmul(self.linKernel_selectedXTest, self.eigen_vec_Bair)
        print('predict Method: 1. maps hold-out-test data to feature space; 2. Returns mapping')
        return zBarshan, zBair

    def evaluateBair(self, zBair):
        vT = VarianceThreshold(threshold=0.5)
        selector = vT.fit_transform(X=zBair, y=self.y_test.T)
        lR = LinearRegression()
        lRfit = lR.fit(X=selector, y=self.y_test.T)
        rSquareBair = lRfit.score(X=selector, y=self.y_test.T)
        print('r^2 for regression on testing data for Bair method: ', rSquareBair)
        pass

    def evaluateBarshan(self, zBarshan):
        vT = VarianceThreshold(threshold=0.5)
        selector = vT.fit_transform(X=zBarshan, y=self.y_test.T)
        lR = LinearRegression()
        lRfit = lR.fit(X=selector, y=self.y_test.T)
        rSquareBarshan = lRfit.score(X=selector, y=self.y_test.T)
        print('r^2 for regression on testing data for Barshan method:', rSquareBarshan)
        pass


def main():
    machine = Machine()
    n, p = machine.cleanPrepData()
    thresholded_indicesTest, thresholded_indicesTrain = machine.betasBair()
    selected_x, selected_xTest = machine.threshBair(thresholded_indicesTest, thresholded_indicesTrain)
    machine.PCABair(selected_x, selected_xTest)
    machine.learn_Barshan()
    machine.writeEigen()
    machine.compare()
    zBarshon, zBair = machine.predict()
    machine.evaluateBair(zBair)
    machine.evaluateBarshan(zBarshon)


if __name__ == "__main__":
    main()


